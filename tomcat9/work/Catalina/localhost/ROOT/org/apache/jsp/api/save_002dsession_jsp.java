/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.91
 * Generated at: 2025-08-06 06:28:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.api;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.*;
import java.util.*;
import java.net.URLDecoder;
import com.google.gson.*;
import java.io.*;
import java.util.*;
import java.nio.file.*;
import java.nio.charset.StandardCharsets;
import com.google.gson.*;
import java.text.SimpleDateFormat;

public final class save_002dsession_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


/**
 * CMS 콘텐츠 저장을 위한 파일 유틸리티 클래스
 * JSP 내에서 사용하는 정적 메서드들을 제공
 */
public class FileUtils {
    
    private final String GENERATED_CONTENT_PATH = "generated-content";
    private final String ENCODING = "UTF-8";
    private final Gson gson = new GsonBuilder().setPrettyPrinting().create();
    
    /**
     * 사이트 폴더 경로 생성
     */
    public String getSitePath(ServletContext context, String siteId) {
        String basePath = context.getRealPath("/");
        return basePath + File.separator + GENERATED_CONTENT_PATH + File.separator + siteId;
    }
    
    /**
     * 메뉴 콘텐츠 폴더 경로 생성
     */
    public String getContentPath(ServletContext context, String siteId, String menuId, String submenuId) {
        String sitePath = getSitePath(context, siteId);
        return sitePath + File.separator + menuId + File.separator + submenuId;
    }
    
    /**
     * 폴더 생성 (재귀적)
     */
    public boolean createDirectories(String path) {
        try {
            File directory = new File(path);
            if (!directory.exists()) {
                return directory.mkdirs();
            }
            return true;
        } catch (Exception e) {
            System.err.println("디렉토리 생성 실패: " + path + " - " + e.getMessage());
            return false;
        }
    }
    
    /**
     * 텍스트 파일 저장
     */
    public  boolean saveTextFile(String filePath, String content) {
        try {
            File file = new File(filePath);
            File parentDir = file.getParentFile();
            if (parentDir != null && !parentDir.exists()) {
                parentDir.mkdirs();
            }
            
            try (FileWriter writer = new FileWriter(file, StandardCharsets.UTF_8)) {
                writer.write(content);
                return true;
            }
        } catch (Exception e) {
            System.err.println("파일 저장 실패: " + filePath + " - " + e.getMessage());
            return false;
        }
    }
    
    /**
     * 텍스트 파일 읽기
     */
    public String readTextFile(String filePath) {
        try {
            File file = new File(filePath);
            if (!file.exists()) {
                return null;
            }
            
            StringBuilder content = new StringBuilder();
            try (BufferedReader reader = new BufferedReader(new FileReader(file, StandardCharsets.UTF_8))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    content.append(line).append("\n");
                }
            }
            return content.toString();
        } catch (Exception e) {
            System.err.println("파일 읽기 실패: " + filePath + " - " + e.getMessage());
            return null;
        }
    }
    
    /**
     * JSON 파일 저장
     */
    public  boolean saveJsonFile(String filePath, Object data) {
        try {
            String jsonContent = gson.toJson(data);
            return saveTextFile(filePath, jsonContent);
        } catch (Exception e) {
            System.err.println("JSON 파일 저장 실패: " + filePath + " - " + e.getMessage());
            return false;
        }
    }
    
    /**
     * JSON 파일 읽기
     */
    public   Map<String, Object> readJsonFile(String filePath) {
        try {
            String content = readTextFile(filePath);
            if (content == null || content.trim().isEmpty()) {
                return null;
            }
            
            return gson.fromJson(content, Map.class);
        } catch (Exception e) {
            System.err.println("JSON 파일 읽기 실패: " + filePath + " - " + e.getMessage());
            return null;
        }
    }
    
    /**
     * 사이트 정보 객체 생성
     */
    public   Map<String, Object> createSiteInfo(String siteId, String siteName, String domain) {
        Map<String, Object> siteInfo = new HashMap<>();
        siteInfo.put("siteId", siteId);
        siteInfo.put("siteName", siteName);
        siteInfo.put("domain", domain);
        siteInfo.put("theme", "academic");
        siteInfo.put("language", "ko");
        siteInfo.put("createdAt", new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(new Date()));
        siteInfo.put("lastUpdated", new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(new Date()));
        return siteInfo;
    }
    
    /**
     * 콘텐츠 메타데이터 객체 생성
     */
    public   Map<String, Object> createContentMetadata(String pageId, String title, String subtitle, 
                                                           String mainContent, String features, double processingTime) {
        Map<String, Object> metadata = new HashMap<>();
        metadata.put("pageId", pageId);
        metadata.put("timestamp", new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(new Date()));
        
        // 콘텐츠 정보
        Map<String, Object> content = new HashMap<>();
        content.put("title", title);
        content.put("subtitle", subtitle);
        content.put("mainContent", parseJsonArray(mainContent));
        content.put("features", parseJsonArray(features));
        content.put("images", new ArrayList<>());
        content.put("metadata", new HashMap<>());
        metadata.put("content", content);
        
        // 생성 정보
        Map<String, Object> generationInfo = new HashMap<>();
        generationInfo.put("model", "gpt-4");
        generationInfo.put("processingTime", processingTime);
        generationInfo.put("wordCount", calculateWordCount(title, subtitle, mainContent, features));
        metadata.put("generationInfo", generationInfo);
        
        return metadata;
    }
    
    /**
     * JSON 배열 문자열을 List로 파싱
     */
    private      List<Object> parseJsonArray(String jsonStr) {
        try {
            if (jsonStr == null || jsonStr.trim().isEmpty()) {
                return new ArrayList<>();
            }
            return gson.fromJson(jsonStr, List.class);
        } catch (Exception e) {
            // JSON 파싱 실패 시 단순 문자열로 처리
            List<Object> result = new ArrayList<>();
            result.add(jsonStr);
            return result;
        }
    }
    
    /**
     * 단어 수 계산
     */
    private int calculateWordCount(String title, String subtitle, String mainContent, String features) {
        int totalChars = 0;
        
        if (title != null) totalChars += title.length();
        if (subtitle != null) totalChars += subtitle.length();
        if (mainContent != null) totalChars += mainContent.length();
        if (features != null) totalChars += features.length();
        
        return totalChars;
    }
    
    /**
     * 파일 존재 여부 확인
     */
    public boolean fileExists(String filePath) {
        return new File(filePath).exists();
    }
    
    /**
     * 폴더 내 모든 사이트 목록 조회
     */
    public   List<String> listSites(ServletContext context) {
        List<String> sites = new ArrayList<>();
        try {
            String basePath = context.getRealPath("/") + File.separator + GENERATED_CONTENT_PATH;
            File baseDir = new File(basePath);
            
            if (baseDir.exists() && baseDir.isDirectory()) {
                File[] siteDirs = baseDir.listFiles(File::isDirectory);
                if (siteDirs != null) {
                    for (File siteDir : siteDirs) {
                        sites.add(siteDir.getName());
                    }
                }
            }
        } catch (Exception e) {
            System.err.println("사이트 목록 조회 실패: " + e.getMessage());
        }
        return sites;
    }
    
    /**
     * 사이트 내 메뉴 목록 조회
     */
    public List<String> listMenus(ServletContext context, String siteId) {
        List<String> menus = new ArrayList<>();
        try {
            String sitePath = getSitePath(context, siteId);
            File siteDir = new File(sitePath);
            
            if (siteDir.exists() && siteDir.isDirectory()) {
                File[] menuDirs = siteDir.listFiles(file -> 
                    file.isDirectory() && !file.getName().equals("site-info.json")
                );
                if (menuDirs != null) {
                    for (File menuDir : menuDirs) {
                        menus.add(menuDir.getName());
                    }
                }
            }
        } catch (Exception e) {
            System.err.println("메뉴 목록 조회 실패: " + e.getMessage());
        }
        return menus;
    }
    
    /**
     * 응답 JSON 생성 (성공)
     */
    public   String createSuccessResponse(String message, Object data) {
        Map<String, Object> response = new HashMap<>();
        response.put("success", true);
        response.put("message", message);
        response.put("data", data);
        response.put("timestamp", new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(new Date()));
        return gson.toJson(response);
    }
    
    /**
     * 응답 JSON 생성 (실패)
     */
    public   String createErrorResponse(String message, String error) {
        Map<String, Object> response = new HashMap<>();
        response.put("success", false);
        response.put("message", message);
        response.put("error", error);
        response.put("timestamp", new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(new Date()));
        return gson.toJson(response);
    }
    
    /**
     * 안전한 파일명 생성 (특수문자 제거)
     */
    public  String sanitizeFileName(String fileName) {
        if (fileName == null) return "untitled";
        return fileName.replaceAll("[^a-zA-Z0-9가-힣._-]", "_");
    }
    
    /**
     * 폴더 크기 계산 (바이트)
     */
    public   long calculateDirectorySize(String dirPath) {
        try {
            File directory = new File(dirPath);
            return Files.walk(directory.toPath())
                    .filter(Files::isRegularFile)
                    .mapToLong(path -> {
                        try {
                            return Files.size(path);
                        } catch (Exception e) {
                            return 0L;
                        }
                    })
                    .sum();
        } catch (Exception e) {
            return 0L;
        }
    }
    
    /**
     * 데이터 베이스 경로 생성 (/data/)
     * JSP API 파일들에서 사용하는 통합 데이터 저장 경로
     */
    public String getDataBasePath(ServletContext application) {
        String basePath = application.getRealPath("/");
        return basePath + File.separator + "data";
    }
}

// FileUtils 인스턴스 생성
FileUtils fileUtils = new FileUtils();


  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/api/utils/FileUtils.jsp", Long.valueOf(1754455268926L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(10);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("com.google.gson");
    _jspx_imports_packages.add("java.nio.file");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("java.net.URLDecoder");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("java.nio.charset.StandardCharsets");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');

/**
 * CMS AI 세션 상태 저장 API
 * JSPContentStorage.saveSession()과 연동
 * POST 요청으로 세션 상태 정보를 저장
 * 
 * Parameters:
 * - siteId: 사이트 고유 ID (기본값: ewha)
 * - sessionData: 세션 데이터 JSON (currentPage, completedPages, totalPages, startTime, lastActivity 등)
 */

response.setContentType("application/json; charset=UTF-8");
response.setHeader("Access-Control-Allow-Origin", "*");
response.setHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS");
response.setHeader("Access-Control-Allow-Headers", "Content-Type");

// OPTIONS 요청 처리 (CORS preflight)
if ("OPTIONS".equals(request.getMethod())) {
    response.setStatus(HttpServletResponse.SC_OK);
    return;
}

try {
    // POST 요청만 허용
    if (!"POST".equals(request.getMethod())) {
        out.print(fileUtils.createErrorResponse("잘못된 요청 방식", "POST 요청만 허용됩니다."));
        return;
    }
    
    // 파라미터 수집
    String siteId = request.getParameter("siteId");
    String sessionDataJson = request.getParameter("sessionData");
    
    // 기본값 설정
    if (siteId == null || siteId.trim().isEmpty()) {
        siteId = "ewha";
    }
    
    // 필수 파라미터 검증
    if (sessionDataJson == null || sessionDataJson.trim().isEmpty()) {
        out.print(fileUtils.createErrorResponse("필수 파라미터 누락", "sessionData가 필요합니다."));
        return;
    }
    
    // URL 디코딩
    siteId = URLDecoder.decode(siteId, "UTF-8");
    sessionDataJson = URLDecoder.decode(sessionDataJson, "UTF-8");
    
    // 안전한 파일명 생성
    siteId = fileUtils.sanitizeFileName(siteId);
    
    // JSON 데이터 파싱
    Gson gson = new Gson();
    Map<String, Object> sessionData;
    try {
        sessionData = gson.fromJson(sessionDataJson, Map.class);
    } catch (Exception e) {
        out.print(fileUtils.createErrorResponse("JSON 파싱 오류", "sessionData JSON 형식이 올바르지 않습니다: " + e.getMessage()));
        return;
    }
    
    // 1. 데이터 폴더 생성 (/data/siteId/)
    String dataBasePath = fileUtils.getDataBasePath(application);
    String siteDataPath = dataBasePath + File.separator + siteId;
    
    if (!fileUtils.createDirectories(siteDataPath)) {
        out.print(fileUtils.createErrorResponse("폴더 생성 실패", "사이트 데이터 폴더를 생성할 수 없습니다: " + siteDataPath));
        return;
    }
    
    // 2. 세션 정보 보완
    sessionData.put("siteId", siteId);
    sessionData.put("lastSavedAt", new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(new Date()));
    
    // 세션 ID가 없으면 생성
    if (!sessionData.containsKey("sessionId")) {
        sessionData.put("sessionId", "session_" + System.currentTimeMillis());
    }
    
    // 통계 정보 계산
    List<String> completedPages = (List<String>) sessionData.get("completedPages");
    if (completedPages != null) {
        sessionData.put("progressPercentage", 
            sessionData.get("totalPages") != null && ((Number) sessionData.get("totalPages")).intValue() > 0 
                ? (double) completedPages.size() / ((Number) sessionData.get("totalPages")).intValue() * 100 
                : 0);
    }
    
    // 3. 세션 JSON 파일 저장 (session.json)
    String sessionJsonPath = siteDataPath + File.separator + "session.json";
    
    if (!fileUtils.saveJsonFile(sessionJsonPath, sessionData)) {
        out.print(fileUtils.createErrorResponse("세션 저장 실패", "세션 JSON 파일 저장에 실패했습니다."));
        return;
    }
    
    // 4. 성공 응답 생성
    Map<String, Object> responseData = new HashMap<>();
    responseData.put("siteId", siteId);
    responseData.put("sessionId", sessionData.get("sessionId"));
    responseData.put("filePath", sessionJsonPath);
    responseData.put("fileSize", new File(sessionJsonPath).length());
    responseData.put("lastSavedAt", sessionData.get("lastSavedAt"));
    
    // 세션 통계 정보
    Map<String, Object> sessionStats = new HashMap<>();
    sessionStats.put("currentPage", sessionData.get("currentPage"));
    sessionStats.put("totalPages", sessionData.get("totalPages"));
    sessionStats.put("completedPages", completedPages != null ? completedPages.size() : 0);
    sessionStats.put("progressPercentage", sessionData.get("progressPercentage"));
    sessionStats.put("startTime", sessionData.get("startTime"));
    sessionStats.put("lastActivity", sessionData.get("lastActivity"));
    responseData.put("sessionStats", sessionStats);
    
    out.print(fileUtils.createSuccessResponse("세션이 성공적으로 저장되었습니다.", responseData));
    
} catch (Exception e) {
    // 예외 처리
    StringWriter sw = new StringWriter();
    PrintWriter pw = new PrintWriter(sw);
    e.printStackTrace(pw);
    String stackTrace = sw.toString();
    
    System.err.println("save-session.jsp 오류: " + e.getMessage());
    System.err.println("Stack trace: " + stackTrace);
    
    out.print(fileUtils.createErrorResponse("서버 내부 오류", 
        "세션 저장 중 오류가 발생했습니다: " + e.getMessage()));
}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
