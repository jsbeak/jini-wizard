/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.91
 * Generated at: 2025-08-06 05:58:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.api;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.*;
import java.util.*;
import java.nio.file.*;
import java.nio.charset.StandardCharsets;
import com.google.gson.*;

public final class get_002dtemplate_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


// 템플릿 이름 가져오기
private String getTemplateName(String templateId) {
    Map<String, String> templateNames = new HashMap<>();
    templateNames.put("university-ewha", "이화여자대학교 템플릿");
    templateNames.put("corporate-tech", "테크 기업 템플릿");
    templateNames.put("government-basic", "공공기관 기본 템플릿");
    
    return templateNames.getOrDefault(templateId, "기본 템플릿");
}

// 템플릿 카테고리 가져오기
private String getTemplateCategory(String templateId) {
    if (templateId.startsWith("university")) return "대학";
    if (templateId.startsWith("corporate")) return "기업";
    if (templateId.startsWith("government")) return "공공기관";
    return "기타";
}

// 템플릿 설명 가져오기
private String getTemplateDescription(String templateId) {
    Map<String, String> descriptions = new HashMap<>();
    descriptions.put("university-ewha", "이화여자대학교 스타일의 녹색 테마 템플릿");
    descriptions.put("corporate-tech", "모던한 테크 기업 스타일 템플릿");
    descriptions.put("government-basic", "정부 및 공공기관용 기본 템플릿");
    
    return descriptions.getOrDefault(templateId, "표준 템플릿");
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(10);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("com.google.gson");
    _jspx_imports_packages.add("java.nio.file");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("java.nio.charset.StandardCharsets");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("application/json; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

// UTF-8 인코딩 설정
request.setCharacterEncoding("UTF-8");
response.setCharacterEncoding("UTF-8");
response.setContentType("application/json; charset=UTF-8");
response.setHeader("Access-Control-Allow-Origin", "*");
response.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
response.setHeader("Access-Control-Allow-Headers", "Content-Type");

// OPTIONS 요청 처리 (CORS preflight)
if ("OPTIONS".equals(request.getMethod())) {
    response.setStatus(HttpServletResponse.SC_OK);
    return;
}

Gson gson = new GsonBuilder().setPrettyPrinting().create();
Map<String, Object> result = new HashMap<>();

try {
    // 파라미터 받기
    String templateId = request.getParameter("templateId");
    
    // 기본값 설정
    if (templateId == null || templateId.trim().isEmpty()) {
        templateId = "university-ewha"; // 기본 템플릿
    }
    
    // 템플릿 파일 경로
    String templatePath = application.getRealPath("/templates/" + templateId + ".html");
    File templateFile = new File(templatePath);
    
    if (!templateFile.exists()) {
        // 템플릿 파일이 없으면 오류 반환
        result.put("success", false);
        result.put("message", "템플릿을 찾을 수 없습니다: " + templateId);
        out.print(gson.toJson(result));
        return;
    }
    
    // 템플릿 파일 읽기
    StringBuilder templateContent = new StringBuilder();
    try (BufferedReader reader = new BufferedReader(
            new InputStreamReader(new FileInputStream(templateFile), StandardCharsets.UTF_8))) {
        String line;
        while ((line = reader.readLine()) != null) {
            templateContent.append(line).append("\n");
        }
    }
    
    // 템플릿 메타데이터 (나중에 확장 가능)
    Map<String, Object> templateData = new HashMap<>();
    templateData.put("templateId", templateId);
    templateData.put("templateName", getTemplateName(templateId));
    templateData.put("templateHTML", templateContent.toString());
    templateData.put("category", getTemplateCategory(templateId));
    templateData.put("description", getTemplateDescription(templateId));
    templateData.put("version", "1.0.0");
    
    // 성공 응답
    result.put("success", true);
    result.put("message", "템플릿 로드 성공");
    result.put("data", templateData);
    
} catch (Exception e) {
    // 오류 처리
    result.put("success", false);
    result.put("message", "템플릿 로드 중 오류 발생");
    result.put("error", e.getMessage());
    
    // 서버 로그에 오류 출력
    System.err.println("get-template.jsp 오류: " + e.getMessage());
    e.printStackTrace();
}

// JSON 응답 출력
out.print(gson.toJson(result));

      out.write('\n');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
